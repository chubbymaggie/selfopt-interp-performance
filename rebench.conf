# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'perf-overview.data'

statistics:
    confidence_level: 0.95

runs:
    number_of_data_points: 10

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    macro-steady-somns:
        gauge_adapter: RebenchLog
        command: " core-lib/Benchmarks/Harness.som %(benchmark)s 250 0 "
        max_runtime: 60000
        benchmarks: &SOM_JIT
            - DeltaBlue:
                extra_args: 12000
            - Mandelbrot:
                extra_args: 500
            - Richards:
                extra_args: 100
            - NBody:
                extra_args: 400000
            - Json:
                extra_args: 80
            - GraphSearch:
                extra_args: 60
            - PageRank:
                extra_args: 1200
            
            - Fannkuch:
                extra_args: 9
            - Bounce:
                extra_args: 3000
            - Permute:
                extra_args: 2500
            - Queens:
                extra_args: 1200
            - Sieve:
                extra_args: 5000
            - Storage:
                extra_args: 1500
            - Towers:
                extra_args: 1500

    macro-steady-somns-sort:
        gauge_adapter: RebenchLog
        command: " core-lib/Benchmarks/Harness.som Sort.%(benchmark)s 250 0 "
        max_runtime: 60000
        benchmarks: &SOM_JIT_SORT
            - BubbleSort:
                extra_args: 4000
            - QuickSort:
                extra_args: 2000
            - TreeSort:
                extra_args: 3000

    macro-steady-java:
        gauge_adapter: RebenchLog
        location: implementations
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s 250 0"
        max_runtime: 60000
        benchmarks: *SOM_JIT
    macro-steady-java-sort:
        gauge_adapter: RebenchLog
        location: implementations
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s 250 0"
        max_runtime: 60000
        benchmarks: *SOM_JIT_SORT
    
    async-micro-jit:
        gauge_adapter: RebenchLog
        command: " -t%(cores)s core-lib/Benchmarks/AsyncHarness.som AsyncFeatures.%(benchmark)s 250 0 "
        max_runtime: 420
        cores: [1, 8]
        benchmarks:
            - SendDirect:
                extra_args: 400000
            - SendDirectComplexLookup:
                extra_args: 400000
            - SendWithManyArgs:
                extra_args: 400000
            - SendManyToPromise:
                extra_args: 200000
            - WhenResolved:
                extra_args: 200000
            - ManyWhenResolved:
                extra_args: 400000
            - SplitAsyncMethod:
                extra_args: 400000

    savina-jit:
        gauge_adapter: RebenchLog
        command: " -t%(cores)s core-lib/Benchmarks/AsyncHarness.som Savina.%(benchmark)s 250 0 "
        max_runtime: 420
        cores: [1, 2, 4, 6, 8]
        benchmarks:
            # Microbenchmarks
            - PingPong:
                extra_args: 40000
                codespeed_name: "[M] PingPong"
            - Counting:
                extra_args: 200000  # was 1000000
                codespeed_name: "[M] Counting"
            - ForkJoinThroughput:
                extra_args: "3000:60" # "10000:60"
                codespeed_name: "[M] ForkJoinThroughput"
            - ForkJoinActorCreation:
                extra_args: 40000
                codespeed_name: "[M] ForkJoinActorCreation"
            - ThreadRing:
                extra_args: "100:100000"
                codespeed_name: "[M] ThreadRing"
            - Chameneos:
                extra_args: "100:30000"  # "100:200000"
                codespeed_name: "[M] Chameneos"
            
            # Concurrency
            - ConcurrentDictionary:
                extra_args: "20:1000:20" # "20:10000:50"
                codespeed_name: "[C] ConcurrentDictionary"
            - ConcurrentSortedLinkedList:
                extra_args: "10:1500:10:1" # "20:8000:10:1"
                codespeed_name: "[C] ConcurrentSortedLinkedList"
            - ProducerConsumerBoundedBuffer:
                extra_args: "40:10:10:600" # "50:40:40:1000"
                codespeed_name: "[C] ProducerConsumerBoundedBuffer"

            # Parallelism
            - RadixSort:
                extra_args: "10000:1152921504606846976:74755"  # "100000:1152921504606846976:74755"
                codespeed_name: "[P] RadixSort"
            - UnbalancedCobwebbedTree:
                extra_args: "10:500:100"
                codespeed_name: "[P] UnbalancedCobwebbedTree"
            - TrapezoidalApproximation:
                extra_args: "100:5000:1:5" # "100:10000000:1:5"
                codespeed_name: "[P] TrapezoidalApproximation"
            - AStarSearch:
                extra_args: "100:20"
                codespeed_name: "[P] AStarSearch"
    savina-org:
        gauge_adapter: SavinaLog
        location: implementations/savina
        command: " -Dhj.maxThreads=%(cores)s -Dhj.numWorkers=%(cores)s -Dactors.corePoolSize=%(cores)s -Dactors.maxPoolSize=%(cores)s edu.rice.habanero.benchmarks.%(benchmark)s%(variable)sBenchmark -iter 400 "
        max_runtime: 600
        variable_values:
            - AkkaActor
            - FuncJavaActor
            - JetlangActor
            - ScalazActor
        cores: [1, 2, 4, 6, 8]
        benchmarks:
            # Microbenchmarks
            - PingPong:
                command: pingpong.PingPong
                extra_args: " -n 40000 "
            - Counting:
                command: count.Counting
                extra_args: " -n 200000 "
            - ForkJoinThroughput:
                command: fjthrput.Throughput
                extra_args: " -n 3000 "
            - ForkJoinActorCreation:
                command: fjcreate.ForkJoin
                extra_args: " -n  40000 "
            - ThreadRing:
                command: threadring.ThreadRing
                extra_args: " -n 100 -r 100000 "
            - Chameneos:
                command: chameneos.Chameneos
                extra_args: " -m 30000 -c 100 "
            # - BigContention:
            #     command: big.Big
            #     extra_args: " -n 2000 "

            ## Concurrency
            - ConcurrentDictionary:
                command: concdict.Dictionary
                extra_args: " -e 20 -m 1000 -w 20 "
            - ConcurrentSortedLinkedList:
                command: concsll.SortedList
                extra_args: " -e 10 -m 1500 -w 10 -s 1 "
            - ProducerConsumerBoundedBuffer:
                command: bndbuffer.ProdCons
                extra_args: " -bb 40 -np 10 -nc 10 -ipp 600 -pc 25 -cc 25  "
            # - DiningPhilosophers:
            #     command: philosopher.Philosopher
            # - SleepingBarber:
            #     command: barber.SleepingBarber
            #     extra_args: " -n 1500 "
            # - CigaretteSmokers:
            #     command: cigsmok.CigaretteSmoker
            # - LogisticMapSeries:
            #     command: logmap.LogisticMap
            #     extra_args: " -t 8000 "
            # - BankTransaction:
            #     command: banking.Banking
            #     extra_args: " -n 10000 -a 500 "

            ## Parallelism
            - RadixSort:
                command: radixsort.RadixSort
                extra_args: " -n 10000 -m 1152921504606846976 -s 74755 "
            # - FilterBank:
            #     command: filterbank.FilterBank
            #     extra_args: " -sim 16384"
            # - SieveOfEratosthenes:
            #     command: sieve.Sieve
            - UnbalancedCobwebbedTree: 
                command: uct.Uct
                extra_args: " -binomial 10 -avg 500 -stdev 100 -nodes 2000 "
            # - OnlineFacilityLocation:
            #     command: facloc.FacilityLocation
            #     extra_args: " -n 30000 "
            - TrapezoidalApproximation:
                command: trapezoid.Trapezoidal
                extra_args: " -w 100 -n 5000 -l 1 -r 5 "
            # - PrecisePiComputation:
            #     command: piprecision.PiPrecision
            #     extra_args: " -p 2000 "
            # - RecursiveMatrixMultiplication:
            #     command: recmatmul.MatMul
            #     extra_args: " -n 400 "
            # - Quicksort:
            #     command: quicksort.QuickSort
            #     extra_args: " -n 100000 "
            # - AllPairsShortestPath:
            #     command: apsp.Apsp
            #     extra_args: " -n 100 "
            # - SuccessiveOverRelaxation:
            #     command: sor.SucOverRelax
            - AStarSearch:
                command: astar.GuidedSearch
                extra_args: " -w 100 -g 20 "
            # - NQueens:
            #     command: nqueenk.NQueens
            #     extra_args: " -n 11 "

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    Java8:
        path: implementations/
        binary: java8.sh
        args: "-server "
    Graal:
        path: /home/smarr/Projects/graal/jvmci
        binary: jdk1.8.0_60/product/bin/java
    GraalGraal:
        path: /home/smarr/Projects/graal-graal/jvmci
        binary: jdk1.8.0_60/product/bin/java
    # GraalE:
    #     path: /home/smarr/Projects/graal-e/jvmci
    #     binary: jdk1.8.0_60/product/bin/java
    # GraalEGraal:
    #     path: /home/smarr/Projects/graal-e-graal/jvmci
    #     binary: jdk1.8.0_60/product/bin/java
    # SOMns-jit:
    #     path: /home/smarr/Projects/graal/jvmci
    #     binary: jdk1.8.0_60/product/bin/java
    #     args: "-d64 -dsa -da -Djvmci.option.TraceTruffleInlining=false -Djvmci.option.TraceTruffleCompilation=false -Xbootclasspath/a:build/classes:libs/truffle/build/truffle-api.jar som.VM --platform core-lib/Platform.som "
    SOMns-jit:
        path: implementations/SOMns
        binary: fast
        args: "--no-assert "

    # SOMns-jit-graal:
    #     path: /home/smarr/Projects/graal-graal/jvmci
    #     binary: jdk1.8.0_60/product/bin/java
    #     args: "-d64 -dsa -da -Djvmci.option.TraceTruffleInlining=false -Djvmci.option.TraceTruffleCompilation=false -Xbootclasspath/a:build/classes:libs/truffle/build/truffle-api.jar som.VM --platform core-lib/Platform.som "
    # SOMns-jit-e:
    #     path: /home/smarr/Projects/graal-e/jvmci
    #     binary: jdk1.8.0_60/product/bin/java
    #     args: "-d64 -dsa -da -Djvmci.option.TraceTruffleInlining=false -Djvmci.option.TraceTruffleCompilation=false -Xbootclasspath/a:build/classes:libs/truffle/build/truffle-api.jar som.VM --platform core-lib/Platform.som "
    # SOMns-jit-e-graal:
    #     path: /home/smarr/Projects/graal-e-graal/jvmci
    #     binary: jdk1.8.0_60/product/bin/java
    #     args: "-d64 -dsa -da -Djvmci.option.TraceTruffleInlining=false -Djvmci.option.TraceTruffleCompilation=false -Xbootclasspath/a:build/classes:libs/truffle/build/truffle-api.jar som.VM --platform core-lib/Platform.som "
    SOMns-wo-opt-jit:
        path: implementations/SOMns-wo-opt
        binary: fast
        args: "--no-assert "
    JavaSavina:
        path: /home/smarr/Projects/graal/jvmci
        binary: jdk1.8.0_60/product/bin/java
        args: " -cp target/savina-0.0.1-SNAPSHOT-jar-with-dependencies.jar "

experiments:
    Java:
        data_file: data/java.data
        actions:    benchmark
        benchmark:
            - macro-steady-java
            - macro-steady-java-sort
        executions:
    #         - Java8
            - Graal
    #         - GraalGraal
    #         - GraalE
    #         - GraalEGraal
    SOMns-jit:
        data_file: data/somns.data
        description: Benchmarks on SOMns implementations
        benchmark:
            - macro-steady-somns
            - macro-steady-somns-sort
        executions:
            - SOMns-jit
            # - SOMns-jit-graal
            # - SOMns-jit-e
            # - SOMns-jit-e-graal

    SOMns-actor:
        data_file: data/actor.data
        description: Run Actor benchmarks on SOMns implementations
        benchmark:
            - savina-jit
        executions:
            - SOMns-jit
            - SOMns-wo-opt-jit
    SOMns-micro:
        data_file: data/micro.data
        description: Run async. microbenchmarks on SOMns implementations
        benchmark:
            - async-micro-jit
        executions:
            - SOMns-jit
            - SOMns-wo-opt-jit
    Savina:
        data_file: data/savina.data
        description: Run the Savina benchmarks
        benchmark:
            - savina-org
        executions:
            - JavaSavina

