# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'perf-overview.data'

statistics:
    confidence_level: 0.95

runs:
    number_of_data_points: 10

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    macro-steady-somns:
        gauge_adapter: RebenchLog
        command: " core-lib/Benchmarks/Harness.som %(benchmark)s 1000 0 "
        max_runtime: 60000
        benchmarks: &SOM_JIT
            - DeltaBlue:
                extra_args: 12000
            - Mandelbrot:
                extra_args: 500
            - Richards:
                extra_args: 100
            - NBody:
                extra_args: 400000
            - Json:
                extra_args: 80
            - GraphSearch:
                extra_args: 60
            - PageRank:
                extra_args: 1200
            
            - Fannkuch:
                extra_args: 9
            - Bounce:
                extra_args: 3000
            - Permute:
                extra_args: 2500
            - Queens:
                extra_args: 1200
            - Sieve:
                extra_args: 5000
            - Storage:
                extra_args: 1500
            - Towers:
                extra_args: 1500

    macro-steady-somns-sort:
        gauge_adapter: RebenchLog
        command: " core-lib/Benchmarks/Harness.som Sort.%(benchmark)s 1000 0 "
        max_runtime: 60000
        benchmarks: &SOM_JIT_SORT
            - BubbleSort:
                extra_args: 4000
            - QuickSort:
                extra_args: 2000
            - TreeSort:
                extra_args: 3000

    macro-steady-java:
        gauge_adapter: RebenchLog
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s 1000 0"
        max_runtime: 60000
        benchmarks: *SOM_JIT
    macro-steady-java-sort:
        gauge_adapter: RebenchLog
        command: " -cp classic-benchmarks/classic-benchmarks.jar som.%(benchmark)s 1000 0"
        max_runtime: 60000
        benchmarks: *SOM_JIT_SORT
    
    savina-jit:
        gauge_adapter: RebenchLog
        command: "core-lib/Benchmarks/AsyncHarness.som Savina.%(benchmark)s 1000 0 "
        max_runtime: 420
        benchmarks:
            # Microbenchmarks
            - PingPong:
                extra_args: 40000
                codespeed_name: "[M] PingPong"
            - Counting:
                extra_args: 200000  # was 1000000
                codespeed_name: "[M] Counting"
            - ForkJoinThroughput:
                extra_args: "3000:60" # "10000:60"
                codespeed_name: "[M] ForkJoinThroughput"
            - ForkJoinActorCreation:
                extra_args: 40000
                codespeed_name: "[M] ForkJoinActorCreation"
            - ThreadRing:
                extra_args: "100:100000"
                codespeed_name: "[M] ThreadRing"
            - Chameneos:
                extra_args: "100:30000"  # "100:200000"
                codespeed_name: "[M] Chameneos"
            
            # Concurrency
            - ConcurrentDictionary:
                extra_args: "20:1000:20" # "20:10000:50"
                codespeed_name: "[C] ConcurrentDictionary"
            - ConcurrentSortedLinkedList:
                extra_args: "10:1500:10:1" # "20:8000:10:1"
                codespeed_name: "[C] ConcurrentSortedLinkedList"
            - ProducerConsumerBoundedBuffer:
                extra_args: "40:10:10:600" # "50:40:40:1000"
                codespeed_name: "[C] ProducerConsumerBoundedBuffer"

            # Parallelism
            - RadixSort:
                extra_args: "10000:1152921504606846976:74755"  # "100000:1152921504606846976:74755"
                codespeed_name: "[P] RadixSort"
            - TrapezoidalApproximation:
                extra_args: "100:5000:1:5" # "100:10000000:1:5"
                codespeed_name: "[P] TrapezoidalApproximation"

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    Java8:
        path: implementations/
        binary: java8.sh
        args: -server
    Graal:
        path: implementations/
        binary: graal.sh
    SOMns-jit:
        path: implementations/SOMns
        binary: fast
        args: --no-assert
    SOMns-wo-opt-jit:
        path: implementations/SOMns-wo-opt
        binary: fast
        args: --no-assert

experiments:
    Java:
        data_file: data/java.data
        actions:    benchmark
        benchmark:
            - macro-steady-java
            - macro-steady-java-sort
        executions:
            - Java8
            - Graal
    SOMns-jit:
        data_file: data/somns.data
        description: Benchmarks on SOMns implementations
        benchmark:
            - macro-steady-somns
            - macro-steady-somns-sort
        executions:
            - SOMns-jit
    
    SOMns-actor:
        data_file: data/actor.data
        description: Run Actor benchmarks on SOMns implementations
        benchmark:
            - savina-jit
        executions:
            - SOMns-jit
            - SOMns-wo-opt-jit
